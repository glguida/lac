(define defun (macro (name binds body) `(define ,name (labels ,name ,binds ,body))))
(define defmacro (macro (name binds body) `(define ,name (macro ,binds ,body))))

(define NIL ())
(defun null (x) (eq x NIL))

(defmacro caar (x) `(car (car ,x)))
(defmacro cadr (x) `(car (cdr ,x)))
(defmacro cdar (x) `(cdr (car ,x)))
(defmacro cddr (x) `(cdr (cdr ,x)))
(defmacro caaar (x) `(car (car (car ,x))))
(defmacro caadr (x) `(car (car (cdr ,x))))
(defmacro cadar (x) `(car (cdr (car ,x))))
(defmacro caddr (x) `(car (cdr (cdr ,x))))
(defmacro cdaar (x) `(cdr (car (car ,x))))
(defmacro cdadr (x) `(cdr (car (cdr ,x))))
(defmacro cddar (x) `(cdr (cdr (car ,x))))
(defmacro cdddr (x) `(cdr (cdr (cdr ,x))))

(defmacro first (l) `(car ,x))
(defmacro second (l) `(first (cdr ,l)))
(defmacro third (l) `(second (cdr ,l)))
(defmacro fourth (l) `(third (cdr ,l)))
(defmacro fifth (l) `(fourth (cdr ,l)))
(defmacro sixth (l) `(fifth (cdr ,l)))
(defmacro seventh (l) `(sixth (cdr ,l)))
(defmacro eighth (l) `(seventh (cdr ,l)))
(defmacro ninth (l) `(eighth (cdr ,l)))
(defmacro tenth (l) `(ninth (cdr ,l)))

(defmacro let (binds &rest body) 
  `((lambda ,(mapcar car binds) ,@body)
    ,@(mapcar cadr binds)))

(defmacro if (test true false)
  `(cond (,test ,true) (t ,false)))

(defmacro or (x &rest y)
  (let ((g (gensym)))
    `(let ((,g ,x))
       (if ,g ,g  (if (null ',y) NIL (or ,@y))))))

(defmacro and (x &rest y)
  (let ((g (gensym)))
    `(let ((,g ,x))
       (if ,g (if (null ',y) ,g (and ,@y)) ,g))))

(defun listp (x) (or (nullp x) (consp x)))

(defun nth (n l)
  (cond 
    ((eq n 0) (car l))
    (t (nth (- n 1) (cdr l)))))


(defmacro setq (sym val) 
  `(set (quote ,sym) ,val))

(defmacro 1+ (x) `(+ 1 ,x))
(defmacro 1- (x) `(- ,x 1))
(defun evenp (x) (eq (% x 2) 0))
(defun oddp (x) (eq (% x 2) 1))
(defmacro incf (x) `(setq ,x (1+ ,x)))
(defmacro decf (x) `(setq ,x (1- ,x)))

(defun equal (x y) 
  (cond
    ((and (stringp x) (stringp y)) (string-equal x y))
    (t                             (eq x y))))
       

(load "examples.lac")
