(defun fact (n)
  (cond 
    ((eq n 1) 1) 
    (t (* n (fact (- n 1))))))

(defun sum (n)
  (cond 
    ((eq n 1) 1) 
    (t (+ n (sum (- n 1))))))

(defun fib (n)
  (cond 
    ((< n 2) n)
    (t (+ (fib (- n 2)) (fib (- n 1))))))

(defun gcd (a b)
  (cond
    ((eq b 0) a)
    (t (gcd b (% a b)))))

; A tribute to XKCD #710
(defun f-collatz (n)
  (cond 
    ((eq n 1) 1)
    ((evenp n) (setq n (/ n 2))) 
    (t (setq n (+ (* 3 n) 1)))))

(defun collatz (n)
	(cond
		((eq n 1) (list 1))
		(t (cons n (collatz (f-collatz n)))))
)

; 'A short ballad dedicated to the growth of programs'
;  http://cognitivecomputing.wordpress.com/1986/01/28/a-short-ballad-dedicated-to-the-growth-of-programs/
(defun values-with-keys (key alist)
  (cdr (assq key alist)))

; Lambda over Let over Lambda example
(define counter-class (lambda () (let ((x 0)) (lambda () (incf x)))))
; Two counters
(define counter1 (counter-class))
(define counter2 (counter-class))

; Increment the counters
(counter1)
(counter1)
(counter1)
(counter1)
(counter1)
(counter2)

